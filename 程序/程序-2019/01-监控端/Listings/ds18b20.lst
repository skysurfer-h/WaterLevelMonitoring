C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Objects\ds18b20.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE User_DSP\ds18b20.c LARGE OMF2 BROWSE INCDIR(..\STC8_I2C_OLED_Example;.\OLED
                    -_DSP;.\User_DSP;.\Common;.\Main) DEBUG PRINT(.\Listings\ds18b20.lst) OBJECT(.\Objects\ds18b20.obj)

line level    source

   1          #include <stc8fxx.h>
   2          #include "ds18b20.h"
   3          #include <intrins.h>
   4          //#include <float.h>     //浮点数处理
   5          //#include<math.h>
   6          //#include <stdio.h>
   7          #define uchar unsigned char
   8          #define u8 unsigned char
   9          #define u16 unsigned int
  10          #define FOSC 24000000L          //系统频率
  11          
  12          unsigned int temp_z=0;    //整数，
  13          unsigned char temp_a,temp_b,temp_x;//温度十位，个位，小数位
  14          bit  fg=1;        //温度正负标志
  15          //---------函数声明-------------------------------------------------
  16          void get_temp();//获取温度值
  17          void start_temp();//启动温度转换
  18          void DS18b20_reset();//18B20初始化
  19          void write_byte(u8 num);//向18B20写数据
  20          u8 read_byte();//向18B20读数据
  21          void delay_ms1(u8 ms);
  22          
  23          
  24          void Delay600us()       ;       //@24.000MHz
  25          void Delay70us();       //@24.000MHz
  26          void Delay64us();       //@24.000MHz
  27          void Delay60us();       //@24.000MHz
  28          void Delay30us();       //@24.000MHz
  29          void Delay24us();       //@24.000MHz
  30          void Delay14us();       //@24.000MHz
  31          void Delay10us();       //@24.000MHz
  32          void Delay9us();        //@24.000MHz
  33          void Delay6us();        //@24.000MHz
  34          void Delay3us();        //@24.000MHz
  35          void Delay2us();        //@24.000MHz
  36          void Delay1us();        //@24.000MHz
  37          ///******************************************************************************/
  38          //void Delay1(int num){//延时函数
  39          //      while(num--) ;
  40          //}
  41          //void Delay1ms()               //@24.000MHz
  42          //{
  43          //      unsigned char i, j;
  44          //
  45          //      i = 24;
  46          //      j = 85;
  47          //      do
  48          //      {
  49          //              while (--j);
  50          //      } while (--i);
  51          //}
  52          //      
  53          ///***********************************初始化*******************************************/
  54          //unsigned char Ds18b20Init()
C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 2   

  55          //{
  56          //        unsigned int i;
  57          //        DSPORT=0;                         //将总线拉低480us~960us
  58          //        i=140;        
  59          //        while(i--);//延时642us
  60          //        DSPORT=1;                        //然后拉高总线，如果DS18B20做出反应会将在15us~60us后总线拉低
  61          //        i=0;
  62          //        while(DSPORT)        //等待DS18B20拉低总线
  63          //        {
  64          //                i++;
  65          //                if(i>10000)//等待>5MS
  66          //                        return 0;//初始化失败        
  67          //        }
  68          //        return 1;//初始化成功
  69          //}
  70          ///**************************************向18B20写入一个字节****************************************/
  71          //void Ds18b20WriteByte(unsigned char dat)
  72          //{
  73          //        unsigned int i,j;
  74          //        for(j=0;j<8;j++)
  75          //        {
  76          //                DSPORT=0;                        //每写入一位数据之前先把总线拉低1us
  77          //                i++;i++;
  78          //                DSPORT=dat&0x01; //然后写入一个数据，从最低位开始
  79          //                i=12;
  80          //                while(i--); //延时68us，持续时间最少60us
  81          //                DSPORT=1;        //然后释放总线，至少1us给总线恢复时间才能接着写入第二个数值
  82          //                dat>>=1;
  83          //        }
  84          //}
  85          ///*******************************************读取一个字节***********************************/
  86          //unsigned char Ds18b20ReadByte()
  87          //{
  88          //        unsigned char byte,bi;
  89          //        unsigned int i,j;        
  90          //        for(j=8;j>0;j--)
  91          //        {
  92          //                DSPORT=0;//先将总线拉低1us
  93          //                i++;i++;
  94          //                DSPORT=1;//然后释放总线
  95          //                i++;i++;
  96          //                i++;i++;//延时6us等待数据稳定
  97          //                bi=DSPORT;         //读取数据，从最低位开始读取
  98          //                /*将byte左移一位，然后与上右移7位后的bi，注意移动之后移掉那位补0。*/
  99          //                byte=(byte>>1)|(bi<<7);                                                  
 100          //                i=8;                //读取完之后等待48us再接着读取下一个数
 101          //                while(i--);
 102          //        }                                
 103          //        return byte;
 104          //}
 105          ///**************************************让18b20开始转换温度****************************************/
 106          //void  Ds18b20ChangTemp()
 107          //{
 108          //        Ds18b20Init();
 109          //        Delay1ms();
 110          //        Ds18b20WriteByte(0xcc);                //跳过ROM操作命令                 
 111          //        Ds18b20WriteByte(0x44);            //温度转换命令
 112          ////        Delay1ms(100);        //等待转换成功，而如果你是一直刷着的话，就不用这个延时了  
 113          //}
 114          ///**************************************发送读取温度命令****************************************/
 115          //void  Ds18b20ReadTempCom()
 116          //{        
C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 3   

 117          //        Ds18b20Init();
 118          //        Delay1ms();
 119          //        Ds18b20WriteByte(0xcc);         //跳过ROM操作命令
 120          //        Ds18b20WriteByte(0xbe);         //发送读取温度命令
 121          //}
 122          ///**************************************读取温度****************************************/
 123          //void ReadTemperature(void){//读取温度
 124          //    int temp=0;
 125          //      unsigned char tempL=0;
 126          //      unsigned char tempH=0;
 127          //      float tp;
 128          //
 129          //      Ds18b20ChangTemp();                                 //先写入转换命令
 130          //      Ds18b20ReadTempCom();                        //然后等待转换完后发送读取温度命令
 131          //      tempL=Ds18b20ReadByte();                //读取温度值共16位，先读低字节
 132          //      tempH=Ds18b20ReadByte();                //再读高字节
 133          //      temp=tempH;
 134          //      temp<<=8;
 135          //      temp|=tempL;
 136          //
 137          //    if(temp< 0)                                //当温度值为负数
 138          //    {
 139          //         //因为读取的温度是实际温度的补码，所以减1，再取反求出原码
 140          //                temp=temp-1;
 141          //                temp=~temp;
 142          //                tp=temp;
 143          //                temp=tp*0.0625*100+0.5;      
 144          //                              temp_z=temp % 1000 / 100;
 145          //                              temp_x=temp % 100 / 10;  
 146          //                              fg=0;             //读取温度为负时fg=0
 147          //      }
 148          //      else
 149          //      {
 150          //                tp=temp;//因为数据处理有小数点所以将温度赋给一个浮点型变量
 151          //                //如果温度是正的那么，那么正数的原码就是补码它本身
 152          //                temp=tp*0.0625*100+0.5;          
 153          //                              temp_z=(temp % 10000 / 1000)*10+(temp % 1000 / 100);
 154          //                              temp_x=temp % 100 / 10;
 155          //                              fg=1;
 156          //      }
 157          //}
 158          ///*****************************************************************************/
 159          
 160          
 161          //
 162          //
 163          ///******************************ds1820程序***************************************/
 164          //void delay_18B20(unsigned int i)//延时1微秒
 165          //{
 166          //   while(i--);
 167          //}
 168          //void ds1820rst()//ds1820复位*
 169          //{ unsigned char x=0;
 170          //DQ = 1;          //DQ复位
 171          //delay_18B20(8); //延时
 172          //DQ = 0;          //DQ拉低
 173          //delay_18B20(217); //精确延时大于480us
 174          //DQ = 1;          //拉高
 175          //delay_18B20(80); 
 176          //   } 
 177          //
 178          //unsigned char ds1820rd()//读数据
C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 4   

 179          //{ unsigned char i=0;
 180          //unsigned char dat = 0;
 181          //for (i=8;i>0;i--)
 182          //{   DQ = 0; //给脉冲信号
 183          //    dat>>=1;
 184          //    DQ = 1; //给脉冲信号
 185          //    if(DQ)
 186          //    dat|=0x80;
 187          //    delay_18B20(20);
 188          //}
 189          //   return(dat);
 190          //}
 191          //void ds1820wr(uchar wdata)//写数据
 192          //{unsigned char i=0;
 193          //    for (i=8; i>0; i--)
 194          //   { DQ = 0;
 195          //     DQ = wdata&0x01;
 196          //     delay_18B20(20);
 197          //     DQ = 1;
 198          //     wdata>>=1;
 199          //   }
 200          //}
 201          //void read_temp()//读取温度值并转换
 202          //{
 203          //    int temp=0;
 204          //      unsigned char tempL=0;
 205          //      unsigned char tempH=0;
 206          //      float tp;
 207          //      ds1820rst();    
 208          //      ds1820wr(0xcc);//跳过读序列号
 209          //      ds1820wr(0x44);//启动温度转换
 210          //      ds1820rst();    
 211          //      ds1820wr(0xcc);//跳过读序列号
 212          //      ds1820wr(0xbe);//读取温度
 213          //      tempL=ds1820rd();
 214          //      tempH=ds1820rd();
 215          //      temp=tempH;
 216          //      temp<<=8;
 217          //      temp|=tempL;
 218          //
 219          ////    if(temp< 0)                                //当温度值为负数
 220          ////    {
 221          ////       //因为读取的温度是实际温度的补码，所以减1，再取反求出原码
 222          ////                temp=temp-1;
 223          ////                temp=~temp;
 224          ////                tp=temp;
 225          ////                temp=tp*0.0625*100+0.5;      
 226          ////                            temp_z=temp % 1000 / 100;
 227          ////                            temp_x=temp % 100 / 10;  
 228          ////                            fg=0;             //读取温度为负时fg=0
 229          ////    }
 230          ////    else
 231          ////    {
 232          ////                tp=temp;//因为数据处理有小数点所以将温度赋给一个浮点型变量
 233          ////                //如果温度是正的那么，那么正数的原码就是补码它本身
 234          ////                temp=tp*0.0625*100+0.5;                
 235          ////                            temp_z=(temp % 10000 / 1000)*10+(temp % 1000 / 100);
 236          ////                            temp_x=temp % 100 / 10;
 237          ////                            fg=1;
 238          ////    }
 239          //      temp_z=temp;
 240          //}
C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 5   

 241          ///*****************************************************************************/
 242          //
 243          
 244          
 245          
 246          
 247          
 248          /*********************************************************************
 249          * 函数名称：DS18b20_reset()
 250          * 功 ? ?能：18B20初始化
 251          * 入口参数：无
 252          * 出口参数：无
 253          * 返 回 值：无
 254          ********************************************************************/
 255          void DS18b20_reset()    
 256          {
 257   1       bit m=1;
 258   1      
 259   1       while(m)
 260   1       {
 261   2       while(m)
 262   2      {
 263   3      DQ=1;//先将数据线置高电平1
 264   3      Delay6us();//该延时尽可能的短   
 265   3      DQ=0;   //数据线拉低
 266   3      Delay600us();//延时时间至少是480微秒
 267   3      DQ=1;   //数据线拉高
 268   3      Delay70us();//延时等待(如果初始化成功则在15到60毫秒时间
 269   3      //之内产生一个由DS18B20所返回的低电平“0”。据该状态可以来确定它的存在，
 270   3      //但是应注意不能无限的进行等待，不然会使程序进入死循环，所以要进行超时控制)。   
 271   3      m=DQ;
 272   3      }
 273   2      Delay600us();//若CPU读到了数据线上的低电平“0”后，还要做延时，
 274   2      //其延时的时间从主机发出的高电平算起最少要480微秒。
 275   2      m=~DQ;
 276   2       }
 277   1       DQ=1;//将数据线再次拉高到高电平“1”后结束。
 278   1      }
 279          /*********************************************************************
 280          * 函数名称：start_temp()
 281          * 功 ? ?能：启动温度转换
 282          * 入口参数：无
 283          * 出口参数：无
 284          * 返 回 值：无
 285          ********************************************************************/
 286          void start_temp()       
 287          {
 288   1       DS18b20_reset();
 289   1       write_byte(0xCC);  // 发Skip ROM命令
 290   1       write_byte(0x44);  // 发转换命令
 291   1      }
 292          /*********************************************************************
 293          * 函数名称：write_byte(uint8 num)
 294          * 功 ? ?能：向18B20写数据
 295          * 入口参数：要写的一个字节的数据
 296          * 出口参数：无
 297          * 返 回 值：无
 298          ********************************************************************/
 299          void write_byte(u8 num) 
 300          {
 301   1       u8 i;
 302   1      // ?u16 tt;
C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 6   

 303   1       bit m;
 304   1       for(i=0;i<8;i++)
 305   1       {
 306   2       m=num&0x01;//按从低位到高位的顺序发送字节(一次只发送一位)。
 307   2      num>>=1;
 308   2      if(m==0x01)
 309   2      {
 310   3      DQ=0;
 311   3      Delay6us();
 312   3      DQ=1;
 313   3      Delay64us();
 314   3      }
 315   2      else
 316   2      {
 317   3      DQ=0;// 数据线先置低电平“0”。
 318   3      Delay60us();
 319   3      DQ=1;
 320   3      Delay10us();
 321   3      }
 322   2      //      DQ=1;
 323   2      //      DQ=0;// 数据线先置低电平“0”。
 324   2      //      Delay14us();//****这里跟别人不一样，但是满足了官方大于1微秒的时间，而且小于15微秒
 325   2      //      DQ=m;//按从低位到高位的顺序发送字节(一次只发送一位)。
 326   2      //      Delay60us();//从总线拉低到写完至少要持续60微秒
 327   2      //      DQ=1;//将数据线拉到高电平。
 328   2      //      Delay3us();     //总线恢复时间至少1微秒
 329   2       }
 330   1      }
 331          /*********************************************************************
 332          * 函数名称：get_temp()
 333          * 功 ? ?能：获取温度值
 334          * 入口参数：无
 335          * 出口参数：无
 336          * 返 回 值：18B20的双字节温度
 337          ********************************************************************/
 338          void read_temp()
 339          {
 340   1          int temp=0;
 341   1              unsigned char tempL=0;
 342   1              unsigned char tempH=0;
 343   1              float tp;
 344   1       DS18b20_reset();
 345   1       delay_ms1(100);
 346   1       write_byte(0xCC);       //发Skip ROM命令
 347   1       write_byte(0xBE);       //发read命令
 348   1      
 349   1      
 350   1       tempL=read_byte();      //低8位
 351   1       tempH=read_byte();      //高8位
 352   1      // temp=b<<8;
 353   1      // temp|=a;
 354   1      // start_temp();
 355   1      // return(temp);
 356   1              temp=tempH;
 357   1              temp<<=8;
 358   1              temp|=tempL;
 359   1      
 360   1      //    if(temp< 0)                                //当温度值为负数
 361   1      //    {
 362   1      //         //因为读取的温度是实际温度的补码，所以减1，再取反求出原码
 363   1      //                temp=temp-1;
 364   1      //                temp=~temp;
C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 7   

 365   1      //                tp=temp;
 366   1      //                temp=tp*0.0625*100+0.5;      
 367   1      //                              temp_z=temp % 1000 / 100;
 368   1      //                              temp_x=temp % 100 / 10;  
 369   1      //                              fg=0;             //读取温度为负时fg=0
 370   1      //      }
 371   1      //      else
 372   1      //      {
 373   1      //                tp=temp;//因为数据处理有小数点所以将温度赋给一个浮点型变量
 374   1      //                //如果温度是正的那么，那么正数的原码就是补码它本身
 375   1      //                temp=tp*0.0625*100+0.5;          
 376   1      //                              temp_z=(temp % 10000 / 1000)*10+(temp % 1000 / 100);
 377   1      //                              temp_x=temp % 100 / 10;
 378   1      //                              fg=1;
 379   1      //      }
 380   1              temp_z=temp;
 381   1      
 382   1      }
*** WARNING C280 IN LINE 343 OF USER_DSP\DS18B20.C: 'tp': unreferenced local variable
 383          /*********************************************************************
 384          * 函数名称：read_byte()
 385          * 功 ? ?能：向18B20读数据
 386          * 入口参数：无
 387          * 出口参数：无
 388          * 返 回 值：读出的一个字节数据
 389          ********************************************************************/
 390          u8 read_byte()
 391          {
 392   1       u8 i,num;
 393   1      // ?u16 tt;
 394   1       bit m;
 395   1       for(i=0;i<8;i++)
 396   1       {
 397   2      // ?    DQ=1;
 398   2      //      Delay1us();//意思一下
 399   2      DQ=0;//拉低总线
 400   2      Delay6us();//别人用nop,我用精确延时
 401   2      DQ=1;   //这个是不是释放总线的意思？
 402   2      Delay9us();//
 403   2      m=DQ;
 404   2      Delay60us();
 405   2      //      DQ=1;
 406   2      num>>=1;
 407   2      if(m)
 408   2      {
 409   3      num|=0x80;
 410   3      }
 411   2      //      Delay2us();
 412   2       }
 413   1       return(num);
 414   1      }
 415          //========================================================================
 416          // 函数: void ?delay_ms(u8 ms)
 417          // 描述: 延时函数。
 418          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 419          // 返回: none.
 420          // 版本: VER1.0
 421          // 日期: 2013-4-1
 422          // 备注:?
 423          //========================================================================
 424          void delay_ms1(u8 ms)
 425          {
C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 8   

 426   1           u16 i;
 427   1           do{
 428   2               i = FOSC / 13000;
 429   2               while(--i);//14T per loop
 430   2              }while(--ms);
 431   1      }
 432          
 433          
 434          void Delay6us() //@24.000MHz
 435          {
 436   1      unsigned char i;
 437   1      
 438   1      
 439   1      _nop_();
 440   1      _nop_();
 441   1      i = 33;
 442   1      while (--i);
 443   1      }
 444          void Delay600us()       //@24.000MHz
 445          {
 446   1      unsigned char i, j;
 447   1      
 448   1      
 449   1      i = 14;
 450   1      j = 255;
 451   1      do
 452   1      {
 453   2      while (--j);
 454   2      } while (--i);
 455   1      }
 456          void Delay30us()        //@24.000MHz
 457          {
 458   1      unsigned char i, j;
 459   1      
 460   1      
 461   1      i = 1;
 462   1      j = 176;
 463   1      do
 464   1      {
 465   2      while (--j);
 466   2      } while (--i);
 467   1      }
 468          void Delay24us()        //@24.000MHz
 469          {
 470   1      unsigned char i, j;
 471   1      
 472   1      
 473   1      i = 1;
 474   1      j = 140;
 475   1      do
 476   1      {
 477   2      while (--j);
 478   2      } while (--i);
 479   1      }
 480          void Delay64us()        //@24.000MHz
 481          {
 482   1      unsigned char i, j;
 483   1      
 484   1      
 485   1      i = 2;
 486   1      j = 123;
 487   1      do
C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 9   

 488   1      {
 489   2      while (--j);
 490   2      } while (--i);
 491   1      }
 492          
 493          
 494          void Delay3us() //@24.000MHz
 495          {
 496   1      unsigned char i;
 497   1      
 498   1      
 499   1      _nop_();
 500   1      _nop_();
 501   1      i = 15;
 502   1      while (--i);
 503   1      }
 504          void Delay70us()        //@24.000MHz
 505          {
 506   1      unsigned char i, j;
 507   1      
 508   1      
 509   1      i = 2;
 510   1      j = 159;
 511   1      do
 512   1      {
 513   2      while (--j);
 514   2      } while (--i);
 515   1      }
 516          
 517          
 518          void Delay60us()        //@24.000MHz
 519          {
 520   1      unsigned char i, j;
 521   1      
 522   1      
 523   1      i = 2;
 524   1      j = 99;
 525   1      do
 526   1      {
 527   2      while (--j);
 528   2      } while (--i);
 529   1      }
 530          void Delay14us()        //@24.000MHz
 531          {
 532   1      unsigned char i;
 533   1      
 534   1      
 535   1      _nop_();
 536   1      _nop_();
 537   1      i = 81;
 538   1      while (--i);
 539   1      }
 540          void Delay10us()        //@24.000MHz
 541          {
 542   1      unsigned char i;
 543   1      
 544   1      
 545   1      _nop_();
 546   1      _nop_();
 547   1      i = 57;
 548   1      while (--i);
 549   1      }
C51 COMPILER V9.00   DS18B20                                                               12/04/2018 22:11:55 PAGE 10  

 550          
 551          
 552          void Delay1us() //@24.000MHz
 553          {
 554   1      unsigned char i;
 555   1      
 556   1      
 557   1      _nop_();
 558   1      _nop_();
 559   1      i = 3;
 560   1      while (--i);
 561   1      }
 562          void Delay2us() //@24.000MHz
 563          {
 564   1      unsigned char i;
 565   1      
 566   1      
 567   1      _nop_();
 568   1      _nop_();
 569   1      i = 9;
 570   1      while (--i);
 571   1      }
 572          void Delay9us() //@24.000MHz
 573          {
 574   1      unsigned char i;
 575   1      
 576   1      
 577   1      _nop_();
 578   1      _nop_();
 579   1      i = 51;
 580   1      while (--i);
 581   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    340    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
